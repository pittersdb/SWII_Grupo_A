<?xml version="1.0" encoding="UTF-8"?>
<b:beans xmlns:b="http://www.springframework.org/schema/beans"
    xmlns="http://www.springframework.org/schema/security"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:util="http://www.springframework.org/schema/util"
    xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">
 
    <!-- http://www.adictosaltrabajo.com/tutoriales/tutoriales.php?pagina=introSpringSecurity -->
    <!-- http://doanduyhai.wordpress.com/2012/02/26/spring-security-part-v-security-tags/ -->    
    
    <http entry-point-ref="casEntryPoint" use-expressions="true">
       
        
        <intercept-url pattern="/" access="isAuthenticated()" />    
        <intercept-url pattern="/faces/index.xhtml" access="isAuthenticated()" />
        <intercept-url pattern="/faces/usuarios.xhtml" access="hasRole('a')" />
        <intercept-url pattern="/faces/pacientes.xhtml" access="hasAnyRole('a','m', 's')" />
        <intercept-url pattern="/faces/historial.xhtml" access="hasAnyRole('a','m')" />
        <intercept-url pattern="/faces/inventario.xhtml" access="hasAnyRole('a','s')" />
        <intercept-url pattern="/faces/agenda.xhtml" access="hasAnyRole('m','a','s')" />
        <intercept-url pattern="/faces/facturacion.xhtml" access="hasAnyRole('m','a','s')" />
        <intercept-url pattern="/**" access="isAuthenticated()" />
        
        <custom-filter ref="requestSingleLogoutFilter" before="LOGOUT_FILTER"/>
        <custom-filter ref="singleLogoutFilter" before="CAS_FILTER"/>
        <custom-filter ref="casFilter" position="CAS_FILTER" />
        
        <logout logout-success-url="/cas-logout.jsp"/>
    </http>

    <authentication-manager alias="authManager">
        <authentication-provider ref="casAuthProvider" />
    </authentication-manager>
    
    <jdbc-user-service id="userService" data-source-ref="dataSource"
		  users-by-username-query=
		    "select nickname , password, enabled from &quot;SysMedic&quot;.&quot;Users&quot; where lower(nickname) = lower(?)"
		  authorities-by-username-query=
		    "select nickname, rol from &quot;SysMedic&quot;.&quot;Users&quot; where lower(nickname) = lower(?)" />

    <!-- This filter handles a Single Logout Request from the CAS Server -->
    <b:bean id="singleLogoutFilter" class="org.jasig.cas.client.session.SingleSignOutFilter"/>
    <!-- This filter redirects to the CAS Server to signal Single Logout should be performed -->
    <b:bean id="requestSingleLogoutFilter" class="org.springframework.security.web.authentication.logout.LogoutFilter"
        p:filterProcessesUrl="/j_spring_cas_security_logout">
        <b:constructor-arg value="${cas.server.host}/cas-server-webapp/logout"/>
        <b:constructor-arg>
            <b:bean class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler"/>
        </b:constructor-arg>
    </b:bean>

    <b:bean id="serviceProperties"
        class="org.springframework.security.cas.ServiceProperties"
        p:service="${cas.service.host}/sysmedic/j_spring_cas_security_check"
        p:authenticateAllArtifacts="true"/>
    <b:bean id="casEntryPoint"
        class="org.springframework.security.cas.web.CasAuthenticationEntryPoint"
        p:serviceProperties-ref="serviceProperties" p:loginUrl="${cas.server.host}/cas-server-webapp/login" />
    <b:bean id="casFilter"
        class="org.springframework.security.cas.web.CasAuthenticationFilter"
        p:authenticationManager-ref="authManager"
        p:serviceProperties-ref="serviceProperties"
        p:proxyGrantingTicketStorage-ref="pgtStorage"
        p:proxyReceptorUrl="/j_spring_cas_security_proxyreceptor">
        <b:property name="authenticationDetailsSource">
            <b:bean class="org.springframework.security.cas.web.authentication.ServiceAuthenticationDetailsSource"/>
        </b:property>
        <b:property name="authenticationFailureHandler">
            <b:bean class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler"
                p:defaultFailureUrl="/casfailed.jsp"/>
        </b:property>
    </b:bean>
    <!--
        NOTE: In a real application you should not use an in memory implementation. You will also want
              to ensure to clean up expired tickets by calling ProxyGrantingTicketStorage.cleanup()
     -->
    <b:bean id="pgtStorage" class="org.jasig.cas.client.proxy.ProxyGrantingTicketStorageImpl"/>
    <b:bean id="casAuthProvider" class="org.springframework.security.cas.authentication.CasAuthenticationProvider"
        p:serviceProperties-ref="serviceProperties"
        p:key="casAuthProviderKey">
        <b:property name="authenticationUserDetailsService">
            <b:bean
                class="org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper">
                <b:constructor-arg ref="userService" />
            </b:bean>
        </b:property>
        <b:property name="ticketValidator">
            <b:bean
                class="org.jasig.cas.client.validation.Cas20ProxyTicketValidator"
                p:acceptAnyProxy="true"
                p:proxyCallbackUrl="${cas.service.host}/sysmedic/j_spring_cas_security_proxyreceptor"
                p:proxyGrantingTicketStorage-ref="pgtStorage">
                <b:constructor-arg value="${cas.server.host}/cas-server-webapp" />
            </b:bean>
        </b:property>
        <b:property name="statelessTicketCache">
            <b:bean class="org.springframework.security.cas.authentication.EhCacheBasedTicketCache">
                <b:property name="cache">
                    <b:bean id="ehcache" class="net.sf.ehcache.Cache"
                      init-method="initialise"
                      destroy-method="dispose">
                        <b:constructor-arg value="casTickets"/>
                        <b:constructor-arg value="50"/>
                        <b:constructor-arg value="true"/>
                        <b:constructor-arg value="false"/>
                        <b:constructor-arg value="3600"/>
                        <b:constructor-arg value="900"/>
                        <b:property name="cacheManager">
                            <b:bean class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean"/>
                        </b:property>
                    </b:bean>
                </b:property>
            </b:bean>
        </b:property>
    </b:bean>

    <!-- Configuration for the environment can be overriden by system properties -->
    <context:property-placeholder system-properties-mode="OVERRIDE" properties-ref="environment"/>
    <util:properties id="environment">
        <b:prop key="cas.service.host">${server.https.name}</b:prop>
        <b:prop key="cas.server.host">${server.https.name}</b:prop>
    </util:properties>
     
</b:beans>  